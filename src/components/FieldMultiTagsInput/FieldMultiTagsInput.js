import React, { Component } from 'react';
import { bool, func, object, shape, string } from 'prop-types';
import { Field } from 'react-final-form';
import classNames from 'classnames';
import css from './FieldMultiTagsInput.module.css';
import IconClose from '../IconClose/IconClose';

class FieldMultiTagsInputComponent extends Component {
  render() {
    /* eslint-disable no-unused-vars */
    const {
      rootClassName,
      className,
      inputRootClass,
      customErrorText,
      id,
      label,
      input,
      meta,
      onUnmount,
      isUncontrolled,
      inputRef,
      placeHolder,
      ...rest
    } = this.props;
    /* eslint-enable no-unused-vars */

    const selectClasses = classNames(css.select, {
      [css.selectSuccess]: valid,
      [css.selectError]: hasError,
    });
    const selectProps = { className: selectClasses, id, ...input, ...rest };

    const classes = classNames(rootClassName || css.root, className);

    console.log("333333333333333")
    const [tags, setTags] = React.useState([""]);
    const removeTags = indexToRemove => {
      setTags(tags.filter((_, index) => index !== indexToRemove));
    };
    const addTags = event => {
      if (event.target.value && event.target.value.trim !== '') {
        setTags([...tags, event.target.value]);
        event.target.value = '';
      }
    };
    console.log("2222222222222222222222")
    return (
      <div className={classes}>
        <ul>
          {tags.map((tag, index) => {
            <li key={index}>
              <span>{tag}</span>
              <i onClick={() => removeTags(index)}>
                <IconClose />
              </i>
            </li>;
          })}
        </ul>
        <input
          type="text"
          placeholder={placeHolder}
          onKeyUp={e => (e.key === 'Enter' ? addTags(e) : null)}
        />
      </div>
    );
  }
}

FieldMultiTagsInputComponent.defaultProps = {
  rootClassName: null,
  className: null,
  inputRootClass: null,
  onUnmount: null,
  customErrorText: null,
  id: null,
  label: null,
  isUncontrolled: false,
  inputRef: null,
  placeHolder: null
};

FieldMultiTagsInputComponent.propTypes = {
  rootClassName: string,
  className: string,
  inputRootClass: string,

  onUnmount: func,

  // Error message that can be manually passed to input field,
  // overrides default validation message
  customErrorText: string,

  // Label is optional, but if it is given, an id is also required so
  // the label can reference the input in the `for` attribute
  id: string,
  label: string,
  placeHolder: string,

  // Uncontrolled input uses defaultValue prop, but doesn't pass value from form to the field.
  // https://reactjs.org/docs/uncontrolled-components.html#default-values
  isUncontrolled: bool,
  // a ref object passed for input element.
  inputRef: object,

  // Generated by final-form's Field component
  input: shape({
    onChange: func.isRequired,
    // Either 'textarea' or something that is passed to the input element
    type: string.isRequired,
  }).isRequired,
  meta: object.isRequired,
};

class FieldMultiTagsInput extends Component {
  componentWillUnmount() {
    // Unmounting happens too late if it is done inside Field component
    // (Then Form has already registered its (new) fields and
    // changing the value without corresponding field is prohibited in Final Form
    if (this.props.onUnmount) {
      this.props.onUnmount();
    }
  }

  render() {
    return <Field component={FieldMultiTagsInputComponent} {...this.props} />;
  }
}

export default FieldMultiTagsInput;
